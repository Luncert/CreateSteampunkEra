buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "${mixingradle_version}"
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false');
ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : "custom"

version = "mc${minecraft_version}_v${mod_version}" + (dev && !buildnumber.equals("custom") ? "+${buildnumber}" : '')
group = 'com.luncert.steampunkera'
archivesBaseName = 'steampunkera'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    mappings channel: 'official', version: "${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=steampunkera.mixins.json'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            mods {
                ccehanced {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=steampunkera.mixins.json'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            mods {
                ccehanced {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            args '--mod', 'steampunkera', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
            mods {
                ccehanced {
                    source sourceSets.main
                }
            }
        }
    }
}

compileJava {
    options.compilerArgs = ["-Xdiags:verbose"]
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

mixin {
    add sourceSets.main, "steampunkera.refmap.json"
}

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "squiddev maven"
        url 'https://squiddev.cc/maven/'
    }

    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        //location of the maven for mixed mappings and registrate
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }
}

configurations {
    shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

//    def registrate = "com.tterrag.registrate:Registrate:MC1.16.5-${registrate_version}"
//    implementation fg.deobf(registrate)
//    shade registrate

//    implementation fg.deobf("com.jozufozu.flywheel:Flywheel:${flywheel_version}")
//    implementation fg.deobf("com.simibubi.create:Create:mc${minecraft_version}_v${create_version}")
//    implementation fg.deobf("org.squiddev:cc-tweaked-${cc_version}")
    implementation fg.deobf('curse.maven:flywheel-486392:3459739')
    implementation fg.deobf('curse.maven:create-328085:3499718')
    implementation fg.deobf('curse.maven:cc-tweaked-282001:3434680')
    implementation fg.deobf('curse.maven:obfuscate-289380:3336021')
    implementation fg.deobf('curse.maven:cgm-289479:3224957')

    // Compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.16.5:${jei_version}:api")
    // At runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:${jei_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}

jar {
    classifier = 'slim'
    manifest {
        attributes([
            "Specification-Title": "Create:SteampunkEra",
            "Specification-Vendor": "luncert",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"luncert",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "steampunkera.mixins.json"
        ])
    }
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'com.luncert.steampunkera.repack.registrate'
}

reobf {
    shadowJar {}
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives jar, shadowJar, sourcesJar, javadocJar
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

// TODO curseforge